<?php

namespace AppBundle\Repository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
    public function getAll(&$options = array())
    {
        $qb = $this->createQueryBuilder('product');

        if(isset($options['price'])) {
            if($options['price'][0] == '' || $options['price'][1] == '') {
                unset($options['price']);
            } else {
                $qb
                    ->andHaving('product.price BETWEEN :start_price AND :end_price')
                    ->setParameters(array(
                        'start_price'   => $options['price'][0],
                        'end_price'     => $options['price'][1]
                    ));
            }
        }

        if(isset($options['name']) and !empty($options['name'])) {
            $qb
                ->andHaving('product.name LIKE :name')
                ->setParameter('name', '%' . $options['name'] . '%');
        }

        if(isset($options['category']) and !empty($options['category'])) {
            $qb
                ->andHaving('product.category = :category_id')
                ->setParameter('category_id', $options['category'])
            ;
        }

        $qb->leftJoin('product.specifications', 'spec');
        $qb->leftJoin('spec.property', 'property');

        if(isset($options['specs'])) {
            $specs = $options['specs'];

            $specFilterCount = 0;
            $valueCounter = 0;
            foreach($specs as $spec => $values) {
                $specFilterCount++;

                foreach($values as $value) {
                    $valueCounter++;
                    $propName = "prop_$specFilterCount";
                    $valName  = "val_$valueCounter";

                    $qb
                        ->orWhere(
                            "property.id = :$propName AND spec.value = :$valName"
                        )
                        ->setParameter($propName, $spec)
                        ->setParameter($valName, $value)
                    ;
                }
            }

            $qb
                ->groupBy('product.id')
                ->andHaving('count(spec.id) >= :spec_count')
                ->setParameter('spec_count', $specFilterCount);
        }

        return $qb->getQuery()->getResult();
    }

    public function getMaxPrice()
    {
        return $this->createQueryBuilder('product')
            ->select('MAX(product.price)')
            ->getQuery()
            ->getSingleScalarResult()
        ;
    }
}
